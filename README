TO DO:
	IN ORDER:
	/// CONCRETE THINGS:
	
	-finish image loader w/ popup thing.
	
	/*  Steps:
		-have JS set a cookie if the image uploads OK/ or session variable???
		-IF OK:
		-get the link for the image and show a thumbnail here
		-then set the location of the image temporarily 
		-if the user posts the event, the PHP script, takes the location of the image
		copies it to a permenant location, resizes image: thumbnail, lrg
		then finally we store these links in the DB.

		*/
	
	-surround geolocation w/ try catch
	
	try {
	
		} catch (e) {
		
		}
	
		-if it fails, go ahead and geolocate via IP!!! Make little ajax
		script for IP geolocation, or maybe you can do client side? Who does
		this for free?
	
	-work on facebook authentication.
		-then import facebook events.

	-add the extra fields for event registration
		-scripting for the backend for this
		
	/// HAZY THINGS	
	-store the last good address for the user in DB.
		-then if we timeout detecting location, use this.
	
	-generally, the site is ugly, it is only functional

	/// DOWN THE ROAD THINGS
	-Browser/viewing testing
		-I.E.
		-Different resolutions
		-mobile
			-maybe a mobile detection setting that 
			can show where to find the app in the app store.
		-older versions of I.E.
		-look over CSS for things to fix
		
	
	-advanced search:
		-this will allow you to search by date
		-also you can search by keyword
		
	-others/ fixes
		-make the front end update things when signup/ signin

	Use promises for asychronous function calls.
	Tell other people about promises. An callbacks. 
	http://stackoverflow.com/questions/5316697/jquery-return-data-after-ajax-call-success
	



Basic site structure:

	Main folder:
		-contains files that will be viewed by browser directly
		-contains documentation, sometimes an SQL dump or whatev. 
		
	Other folders:
		php
		-all backend PHP scripts
		-also header.php, scripts.php, footer.php, cxn.php
		js
		-contains all the javascript used on the site
		-should hold any library used, unless you can link to a google repository
		css
		-should have one large main CSS folder
		-may contain CSS for plugin elements. 
		img
		-contains images
		- 'img/stock' will be basic site images like arrows, ect
		- 'img/img_db' will hold all images accessed by the mysql database.
		
		
		
		
		
Tables
	eventvalues
	columns: eventid (INT) (PK)(NN)(UQ)(AI) 
		 datetime (DATETIME) (NN)
		 location (VARCHAR(300)) (NN)
	
	uservalues
	columns: userid (INT) (NN)(UQ)(AI)
		 joindate (DATETIME)
		 profilepic (VARCHAR(300))
		 password (VARCHAR(30)) (NN)
		 sex (VARCHAR(6)) (NN)
	 	 location (VARCHAR(300))
		 name (VARCHAR(50)) (NN)
			
useful code for this project:

	https://github.com/a-r-d/ooz-message-board
		-has working AJAX scripts
		-has a very very similar structure
		-has a similar library of functions see php/lib.php
	
	GEOLOCATION via HTML 5
	
	http://html5demos.com/geo

	(Add more URLs as you find them!)

	Google maps:places... (im working on this now -aaron)
	http://code.google.com/apis/maps/documentation/places/
			
			
		
	
	
Search algorith outline:

 --> take user input:
 
	$input = $_GET['search'];
	preg_replace("#[\{\[\}\]\\;\/]#', '', $input); //filter some nasties
	
	$res1 = search_location($input);		// see if we geocode anything!
	$res2 = search_date($input);		 	// see if we can get a date
	$res3 = search_text($input); 			// see if we can search for text with what is left?
	
	function search_location($input)
		{
		//something like this:
		$strings = preg_split("#[ ]#, '', $input); //break into strings when spaces
		
		//then we match against five numbers for a zip code:
		
		// or do we just try to geocode the whole thing?
		
		return $res1;
		}
	
	function search_date($input)
		{
		
		
		}
	

